name: ELK

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write



jobs:
  deploy_elk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v4.0.3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install kubectl
        run: |
          sudo apt-get install kubectl -y

      - name: Update kubeconfig
        run: aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name eks-cluster

      - name: Wait for resources to be created
        run: sleep 30

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Add Elastic Helm Repo
        run: helm repo add elastic https://helm.elastic.co

      - name: Update Helm Repos
        run: helm repo update

      - name: Create and Apply Persistent Volumes for Elasticsearch
        working-directory: ./elasticsearch
        run: kubectl apply -f pv.yaml

      - name: Install Elasticsearch using Helm
        working-directory: ./elasticsearch
        run: helm install elasticsearch elastic/elasticsearch --version="8.5.1" -f values.yaml

      - name: Create and Apply Persistent Volumes for Filebeat
        working-directory: ./filebeat
        run: kubectl apply -f pv.yaml

      - name: Install Filebeat using Helm
        working-directory: ./filebeat
        run: helm install filebeat elastic/filebeat --version="8.5.1" -f values.yaml

      - name: Install Kibana using Helm
        working-directory: ./kibana
        run: helm install kibana elastic/kibana --version="8.5.1"

      - name: Apply Ingress for Kibana
        working-directory: ./kibana
        run: kubectl apply -f ingress.yaml

      - name: Apply Logstash Configuration
        working-directory: ./logstash
        run: kubectl apply -f .


  notify:

    name: Notify on Slack
    runs-on: ubuntu-latest
    # Only run this workflow when "build" workflow succeeds
    needs: [deploy_elk]

    # Only run this workflow if it target is main branch on pull_request event
    if: ${{ github.base_ref == 'main' && github.event_name == 'pull_request' }}

    steps:

      - uses: abinoda/slack-action@master
        env:
          # required
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          # custom message to send to slack
          args: '{\"channel\":\"${{ secrets.SLACK_PR_CHANNEL_ID }}\",\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Pull Request:* ${{ github.event.pull_request.title }} :tada:\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Contributor :* ${{ github.event.pull_request.user.login }}\n*Request State:* ${{ github.event.pull_request.state }}\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"<${{ github.event.pull_request.html_url }}|View Pull Request>\"}}]}' 
        
        # Pick up events even if the job is success.
        if: success()